
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  MULTI=true;
  STATIC=false;
}

PARSER_BEGIN(SelectParser)
package rocfox.rdf2xml.select.parser;

import java.io.CharArrayReader;
import rocfox.rdf2xml.select.dom.SelectExpression;
import rocfox.rdf2xml.exceptions.TransformException;

public class SelectParser
{
	public SelectParser(String expression)
	{
		this(new CharArrayReader(expression.toCharArray()));
	}

	public SelectExpression parse()
	{
		try
		{
			ASTStart start = Start();
			return start.convert();
		}
		catch (ParseException ex)
		{
			throw new TransformException(ex);
		}
	}
}

PARSER_END(SelectParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"-")* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

ASTStart Start() : {}
{
	Expression() <EOF>
	{
		return jjtThis;
	}
}


void Expression() #void : {}
{
	Variable() | Function()
}

ASTVariable Variable() :
{
}
{
	"$" Keyword()
	{
		return jjtThis;
	}
}

ASTFunction Function() :
{
}
{
	FunctionName() "(" Variable() ")"
	{
		return jjtThis;
	}
}

ASTFunctionName FunctionName() :
{
}
{
	Keyword() 
	{
		return jjtThis;
	}
}

void Keyword() #Keyword:
{
	Token t;
}
{
	t=<IDENTIFIER>
	{
		jjtThis.setName(t.image);
	}
}